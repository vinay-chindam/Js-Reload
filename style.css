

HTML:


-->docType:  html version
-->meta tags in thml
  Meta Tags in HTML: Enhancing Web Pages
Meta tags provide metadata about a webpage, helping browsers, search engines, and social media platforms interpret your content correctly. They are placed inside the <head> section of an HTML document.
  char set
  viewport 
  description

-->Tags vs elements in html
-->semantic tags


-->Div vs span (block vs inline elements)
--Relative vs Absolute URLs
-->SEO( search engine optimization)






























Box model
  content 
  padding
  border
  margin

padding vs border

visibility hidden (Layout remains but element stays hidden)
display none ( removes elements completeyly form layout)

position variables:
  Relative (Relative to it self)
  Absolute( relative to it nearest ansestor)
  fixed(Fixed to viewport)
  Sticky (Stays relative for a threshold and   upon scroll after that stays fixed)


Inline Css
Internal Css
External Css


Pseudo classes in css:
  CSS pseudo-classes and pseudo-elements allow you to style elements based on their state or specific parts of an element.
  hover
  focus 
  nth child etc

Pseudo elements:(to style specific part of element):  
  before 
  after
  first letter 
  first line 

Specificity in Css
It is the way of targetting various elements  to style them

if various selectors target the same eelemt , then specificity is used to determine which style should be applied

Block
Inline
Inline-block















Needs a look:

Combinators in css
Grid Vs Flexbox

--------------------------------------------------------------------------------------------

Excellent — CSS positioning is a core topic in frontend and UI developer interviews 👇

Let’s go step-by-step so you can explain it clearly and confidently.

🎯 The position Property in CSS

The position property defines how an element is placed in the document flow and how it’s affected by top, right, bottom, and left properties.

🧩 1️⃣ static (default)
.element {
  position: static;
}


🟢 Description:

This is the default position for all HTML elements.

Elements follow the normal document flow.

You cannot use top, left, right, bottom properties.

📌 Use Case: When you don’t need special positioning.

🧩 2️⃣ relative
.element {
  position: relative;
  top: 20px;
  left: 10px;
}


🟢 Description:

The element stays in the normal flow, but you can move it relative to its original position.

The space it originally occupied remains reserved.

📌 Use Case: Slight adjustments or when setting a parent for an absolutely positioned child.

🧩 3️⃣ absolute
.element {
  position: absolute;
  top: 20px;
  left: 10px;
}


🟢 Description:

The element is removed from the normal document flow.

It’s positioned relative to the nearest ancestor with position: relative | absolute | fixed.

If no such ancestor exists, it’s positioned relative to the <html> (document body).

📌 Use Case: Tooltips, modals, or icons inside containers.

🧩 4️⃣ fixed
.element {
  position: fixed;
  top: 0;
  right: 0;
}


🟢 Description:

The element is removed from normal flow.

It’s positioned relative to the viewport (the visible area of the browser).

Does not move when the page scrolls.

📌 Use Case: Sticky navbars, “back to top” buttons.

🧩 5️⃣ sticky
.element {
  position: sticky;
  top: 0;
}


🟢 Description:

Acts like relative until the user scrolls to a certain point — then it becomes fixed.

The parent container must have a height for it to work.

📌 Use Case: Sticky headers or sidebars that stay visible while scrolling.
